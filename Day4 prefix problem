#include <iostream>
#include <vector>
#include <string>

std::string longestCommonPrefix(const std::vector<std::string>& strs) {
    if (strs.empty()) return "";

    // Start with the first string as the initial prefix
    std::string prefix = strs[0];

    // Compare the prefix with each string in the array
    for (size_t i = 1; i < strs.size(); ++i) {
        const std::string& currentString = strs[i];
        size_t j = 0;

        // Find the length of the common prefix between prefix and currentString
        while (j < prefix.length() && j < currentString.length() && prefix[j] == currentString[j]) {
            ++j;
        }

        // Update the prefix
        prefix = prefix.substr(0, j);

        // If at any point the prefix becomes empty, we can return it immediately
        if (prefix.empty()) return "";
    }

    return prefix;
}

int main() {
    std::vector<std::string> strs = {"flower", "flow", "flight"};
    std::string result = longestCommonPrefix(strs);
    std::cout << "Longest common prefix: " << result << std::endl;
    return 0;
}
